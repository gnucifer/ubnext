<?php

/**
 * Utility functions
 */

function ubn_general_entity_translation_fields_enable($field_names) {
  module_load_include('inc', 'entity_translation', 'entity_translation.node');
  module_load_include('inc', 'entity_translation', 'entity_translation.admin');

  foreach($field_names as $field_name) {
    $field_info = field_info_field($field_name);
    //For each non-translatable field enable translations

    //TODO: warning?
    if (!isset($field_info['translatable'])) {
      continue;
    }

    if (!$field_info['translatable']) {
      //Update field settings
      $field_info['translatable'] = TRUE;
      field_update_field($field_info);
      field_cache_clear();
    }

    //Update entities
    $query = new EntityFieldQuery();
    $result = $query
      ->fieldCondition($field_name)
      ->entityOrderBy('entity_id')
      ->execute();

    foreach ($result as $entity_type => $entities) {
      $entity_translation_status = variable_get("language_content_type_$entity_type", NULL);
      if($entity_translation_status !== ENTITY_TRANSLATION_ENABLED) {
        //Set message?
        variable_set("language_content_type_$entity_type", ENTITY_TRANSLATION_ENABLED);
      }

      foreach (entity_load($entity_type, array_keys($entities)) as $entity) {
        $handler = entity_translation_get_handler($entity_type, $entity);
        $langcode = $handler->getLanguage();
        // Skip process for language neutral entities.
        if ($langcode == LANGUAGE_NONE) {
          continue;
        }

        // We need a two-steps approach while updating field translations: given
        // that field-specific update functions might rely on the stored values to
        // perform their processing, see for instance file_field_update(), first
        // we need to store the new translations and only after we can remove the
        // old ones. Otherwise we might have data loss, since the removal of the
        // old translations might occur before the new ones are stored.
        if (isset($entity->{$field_name}[LANGUAGE_NONE])) {
          // If the field is being switched to translatable and has data for
          // LANGUAGE_NONE then we need to move the data to the right language.

          $translations = $handler->getTranslations();

          if (!empty($translations->data)) {
            foreach ($translations->data as $translation) {
              $entity->{$field_name}[$translation['language']] = $entity->{$field_name}[LANGUAGE_NONE];
            }
          }
          else {
            $entity->{$field_name}[$langcode] = $entity->{$field_name}[LANGUAGE_NONE];
          }

          // Store the original value.
          _entity_translation_update_field($entity_type, $entity, $field_name);
          $entity->{$field_name}[LANGUAGE_NONE] = array();
          // Remove the language neutral value.
          _entity_translation_update_field($entity_type, $entity, $field_name);
        }
      }
    }
  }
  // (Don't really think this is necessary)
  // This is needed for versions of Drupal core 7.10 and lower.
  // See http://drupal.org/node/1380660 for details.
  drupal_static_reset('field_available_languages');
}

/*
function ubn_general_entity_translation_enable($entity_types) {
  module_load_include('inc', 'entity_translation', 'entity_translation.admin');

  $fields = field_info_fields();
  $non_translatable_fields = array();
  foreach($fields as $field_name => $info) {
    foreach($entity_types as $key => $value) {
      $bundles = array();
      if(is_string($key)) {
        $entity_type = $key;
        $bundles = $value;
      }
      else {
        $entity_type = $value;
      }
      if(
        isset($info['translatable']) &&
        isset($info['bundles'][$entity_type] &&
        (empty($bundles) || count(array_intersect($bundles, array_keys($info['bundles'][$entity_type])))))
      ) {
        $non_translatable_fields[$field_name] = $info;
      }
    }
  }
}
*/

function ubn_general_toggle_field_replacement($entity_type, $legacy_field, $bundles = array()) {
  if(empty($bundles)) {
    $info = entity_get_info($entity_type);
    if($info['bundles']) {
      $bundles = array_keys($info['bundles']);
    }
  }
  foreach($bundles as $bundle) {
    if(title_field_replacement_toggle($entity_type, $bundle, $legacy_field)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $entity_type);

      if (!empty($info['efq bundle conditions']) && isset($bundle)) {
        $query->entityCondition('bundle', $bundle);
      }
      $result = $query->execute();
      if($result[$entity_type]) {
        $ids = array_keys($result[$entity_type]);
        title_field_replacement_init($entity_type, $bundle, $legacy_field, $ids);
      }
    }
  }
}

function ubn_general_install() {
	theme_enable(array('ubnext'));
	theme_disable(array('bartik'));
	variable_set('theme_default', 'ubnext');
	$modules = array('dashboard', 'overlay', 'shortcut', 'toolbar', 'search');
	module_disable($modules);
  drupal_uninstall_modules($modules);
  //TODO: Enable feature modules instead of adding as dependencies
}

function ubn_general_update_7100() {
  //TODO: add as dependency instead
  module_enable(array('ubn_slate'));
}

/* Enable entitycache module */
function ubn_general_update_7101() {
  module_enable(array('entitycache'));
}

/* Revert features */
function ubn_general_update_7102() {
  foreach(array('ubn_general', 'ubn_content_types', 'ubn_feeds') as $module) {
    features_revert_module($module);
  }
}

/* "Fix" boolean fields */
function ubn_general_update_7103() {
  features_revert_module('ubn_content_types');
}

/** Disable core search module and truncate cache table to fix cached twig path
 *  in slate
 */
function ubn_general_update_7104() {
  db_truncate('cache')->execute();
  module_disable(array('search'));
}

/* Revert features */
function ubn_general_update_7105() {
  array_map('features_revert_module', array('ubn_content_types', 'ubn_page'));
}

/* Enable field translation for field_mailing_address and field_delivery_address */
function ubn_general_update_7106() {
  ubn_general_entity_translation_fields_enable(array('field_mailing_address', 'field_delivery_address'));
}

/* Revert features */
function ubn_general_update_7107() {
  features_revert_module('ubn_content_types');
}

/* Pathauto persist has been merged into Pathauto, disable and uninstall */
function ubn_general_update_7108() {
  $modules = array('pathauto_persist');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

/* Revert features */
function ubn_general_update_7109() {
  array_map('features_revert_module', array('ubn_content_types', 'ubn_page'));
}

/* Uninstall globalredirect */
function ubn_general_update_7110() {
  $modules = array('globalredirect');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}


// remove hero_image_field on library contenttype
function ubn_general_update_7111() {
  field_delete_field('field_hero_image');
}


function ubn_general_update_7112() {
  features_revert_module('ubn_general');
}

function ubn_general_update_7113() {
  features_revert_module('ubn_content_types');
}

// Replace title with title_field for scald atoms
function ubn_general_update_7114() {
  ubn_general_toggle_field_replacement('scald_atom', 'title');
}

// disable login_destination module
function ubn_general_update_7115() {
  $modules = array('login_destination');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}


// remove body on page
function ubn_general_update_7116() {
  field_delete_field('body');
  features_revert_module('ubn_content_types');
}

function ubn_general_update_7117() {
  features_revert_module('ubn_page');
}

function ubn_general_update_7118() {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'library');
  $result = $query->execute();
  // Re-save library nodes to make sure
  // menu items are assigned by ubn_menu_position
  if(!empty($result['node'])) {
    foreach(array_keys($result['node']) as $nid) {
      $node = node_load($nid);
      node_save($node);
    }
  }
}



//TODO: revert content types??
function ubn_general_update_7119() {
  array_map('features_revert_module', array('ubn_content_types', 'ubn_search'));
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    search_api_index_disable($index->id);
  }
  _ubn_general_feeds_import('databases');
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    search_api_index_enable($index->id);
    search_api_index_items($index);
  }

  // Revert ubn_search agains since
  // index disable triggers disabling of search pages
  features_revert_module('ubn_search');

  /*
  $types = array();
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    $types[$index->item_type][] = $index;
  }
  foreach ($types as $type => $indexes) {
    try {
      $controller = search_api_get_datasource_controller($type);
      $controller->stopTracking($indexes);
      $controller->startTracking($indexes);
    }
    catch (SearchApiException $e) {
      // Modules defining entity or item types might have been disabled. Ignore.
    }
  }
  */
}
/* Re-import all databases */
function ubn_general_update_7120() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_database_urls');
  $result = $query->execute();
  if(isset($result['field_collection_item'])) {
    entity_delete_multiple('field_collection_item', array_keys($result['field_collection_item']));
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'database');
  $result = $query->execute();
  if(isset($result['node'])) {
    entity_delete_multiple('node', array_keys($result['node']));
  }
  _ubn_general_import_databases();
}

/* Re-import all databases (terms of use) */
function ubn_general_update_7121() {
  _ubn_general_import_databases();
}

function ubn_general_update_7122() {
  features_revert(array('ubn_content_types' => array('variable')));
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'database')
    ->execute();
  if($result['node']) {
    pathauto_node_update_alias_multiple(array_keys($result['node']), 'bulkupdate', array('message' => TRUE));
  }
}

/* Set default language to sv for entity translation */
function ubn_general_update_7123() {
  features_revert(array('ubn_content_types' => array('variable')));
}

/* Enable UBN News feature */
function ubn_general_update_7124() {
  module_enable(array('ubn_news'));
}


function ubn_general_update_7125() {
  field_delete_field('field_special_collections');
  field_delete_field('field_study_seats_count');
  field_delete_field('field_group_study_rooms_count');
  field_delete_field('field_adapted_study_rooms_count');
  field_delete_field('field_quiet_reading_room');
  field_delete_field('field_gu_print');
  field_delete_field('field_wlan');
  field_delete_field('field_food_heating_facilities');
  field_delete_field('field_cafe');
  field_delete_field('field_book_return_box');
  features_revert_module('ubn_content_types');
}

function ubn_general_update_7126() {
  /*
  taxonomy_vocabulary_delete("WLAN");
  features_revert_module('ubn_content_types');
  */
}

function ubn_general_update_7127() {
  /*
  $tax = taxonomy_vocabulary_machine_name_load("WLAN");
  taxonomy_vocabulary_delete($tax->vid);
  features_revert_module('ubn_content_types');
  */
}

function ubn_general_update_7128() {
  $tax = taxonomy_vocabulary_machine_name_load("WLAN");
  taxonomy_vocabulary_delete($tax->vid);
  features_revert_module('ubn_content_types');
}

function ubn_general_update_7129() {
  features_revert_module('ubn_content_types');
}


function ubn_general_update_7130() {
  features_revert(array('ubn_news' => array('variable')));
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'story')
    ->execute();
  if($result['node']) {
    pathauto_node_update_alias_multiple(array_keys($result['node']), 'bulkupdate', array('message' => TRUE));
  }
}

function ubn_general_update_7131() {
  module_enable(array('ubn_contact'));
}


// remove body
function ubn_general_update_7132() {
  field_delete_field('body');
  features_revert_module('ubn_content_types');
}

// Remove field_ttx_library_hidden
function ubn_general_update_7133() {
  field_delete_field('field_ttx_library_hidden');
  features_revert_module('ubn_contact');
}

// Revert features
function ubn_general_update_7134() {
  features_revert_module('ubn_contact');
}

// Revert features
function ubn_general_update_7135() {
  module_enable(array('ubn_contact_content'));
  features_revert_module('ubn_contact');
  // Incompatible with ubn_contact
  // because of POST to node page
  module_disable(array('restws'));
}

// Revert features
function ubn_general_update_7136() {
  features_revert_module('ubn_content_types');
  module_disable(array('comment'));
}

function ubn_general_update_7137() {
  field_delete_field('field_anonymus');
  features_revert_module('ubn_content_types');
}

function ubn_general_update_7138() {
  variable_set('grecaptcha_secret_key', variable_get('recaptcha_secret_key', ''));
  variable_set('grecaptcha_site_key', variable_get('recaptcha_site_key', ''));
}

function ubn_general_update_7139() {
  $modules = array('recaptcha');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

function ubn_general_update_7140() {
  $modules = array('captcha');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

//TODO: Disable rdf module?

// Enable entity translation for library
/*
function ubn_general_update_7101() {
  module_load_include('inc', 'entity_translation', 'entity_translation.node');
  foreach(
    array(
      'library',
    ) as $type_name
  ) {
    variable_set("language_content_type_$type_name", ENTITY_TRANSLATION_ENABLED);
  }
  //Field phone?
  ubn_general_entity_translation_fields_enable(array('title_field', 'field_lead'));
}
*/
