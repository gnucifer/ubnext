<?php
/**
 * @file
 * Code for the General feature.
 */

include_once 'ubn_general.features.inc';

function _ubn_general_import_databases() {
  foreach(
    array(
      'databases_topics',
      'databases_categories',
      'databases',
      'database_urls_field_collection'
    ) as $importer_id
  ) {
    _ubn_general_feeds_import($importer_id, 0, TRUE);
  }
}

function _ubn_general_feeds_import($importer_id, $feed_nid = 0, $skip_hash_check = TRUE) {

  db_update('feeds_source')
    ->condition('id', $importer_id)
    ->condition('feed_nid', $feed_nid)
    ->fields(array('state' => FALSE))
    ->execute();
  $source = feeds_source($importer_id, 0)->existing();

  if($skip_hash_check) {
    $importer = $source->importer();
    $config = $importer->processor->getConfig();
    if(empty($config['skip_hash_check'])) {
      $config['skip_hash_check'] = 1;
      $importer->processor->setConfig($config);
    }
  }

  $batch = 0;
  $t = drupal_is_cli() ? 'dt' : 't';
  while($source->import() !== FEEDS_BATCH_COMPLETE) {
    $message = $t(
      'Ran import batch !batch for !importer_id...',
      array(
        '!batch' => ++$batch,
        '!importer_id' => $importer_id
      )
    );
    if(drupal_is_cli()) {
      drush_log($message, 'ok');
    }
    else {
      drupal_set_message($message);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ubn_general_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}



/**
 * Implements hook_strongarm_alter().
 */
function ubn_general_strongarm_alter(&$variables) {
  if (isset($variables['language_default']->value->javascript)) {
    $language_default = variable_get('language_default');

    $variables['language_default']->value->javascript = $language_default->javascript;
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Only works for entities of type 'node'.
 *
 * @param QueryAlterableInterface $query
 */
function ubn_general_query_ENTITY_TRANSLATION_alter(QueryAlterableInterface $query) {
  global $language_content;

  $query->join('entity_translation', 'entity_translation', "entity_translation.entity_type = 'node' AND entity_translation.entity_id = node.nid");
  $query->condition('entity_translation.language', $language_content->language, '=');
}

/**
 * Custom strnatcmp to fix a bad, bad, bad PHP bug!
 */
function ubn_general_strnatcmp($left, $right) {
  if (extension_loaded('intl') === TRUE) {
    global $language;

    switch ($language->language) {
      case 'sv':
        $coll = collator_create('sv_SE');
        break;

      case 'en':
        $coll = collator_create('en_US');
        break;

      default:
        $coll = collator_create('root');
        break;
    }

    $coll->setAttribute(Collator::NUMERIC_COLLATION, Collator::ON);

    return $coll->compare($left, $right);
  }

  return strnatcmp($left, $right);
}

/**
 * Display entities on a map.
 */
function ubn_general_generate_map($entities) {
  global $language_content;

  $coords = array();
  foreach ($entities as $entity) {
    //dsm($entity->field_location['und'][0]['lat']);
    $wrapper = entity_metadata_wrapper('node', $entity);
    $wrapper->language($language_content->language);
    if (!empty($entity->field_location['und'])) {
      $coordinates = $entity->field_location['und'][0]['lat'] . ',' . $entity->field_location['und'][0]['lon'];
    }

    if (empty($coordinates)) {
      continue;
    }

    list($latitude, $longitude) = explode(',', $coordinates);

    $coords[] = array(
      'label' => $wrapper->label(),
      'latitude' => trim($latitude),
      'longitude' => trim($longitude),
    );
  }

  if (empty($coords)) {
    return "";
  }

  return ubn_general_render_map($coords);
}

/**
 * Add JS and cords to render a map.
 */
function ubn_general_render_map($coords = array()) {
  // @todo add this as a setting!
    if (!empty($coords[0]['longitude'] and !empty($coords[0]['latitude']))) {
    drupal_add_js('https://maps.googleapis.com/maps/api/js?key=AIzaSyCrHH1UmYwF_jHleEU6rBCf115wBXCb6KM', 'external');

    drupal_add_js(array('ubMap' => $coords), 'setting');
    drupal_add_js(drupal_get_path('module', 'ubn_general') . '/ubn_general.map.js');

    return '<div id="ub-map-canvas"></div>';
  }

}

/**
 * Implements hook_cron()
 */
function ubn_general_cron() {
  $record_count = _ubn_summon_record_count();
  if(isset($record_count)) {
    variable_set('ubn_general_summon_record_count', $record_count);
  }
}

function ubn_general_admin_paths() {
  return array(
    'atom/*' => TRUE,
  );
}

function ubn_general_field_collection_is_empty_alter(&$is_empty, FieldCollectionItemEntity $item) {
  if($item->field_name === 'field_content_sections') {
    $media_atoms = field_get_items('field_collection_item', $item, 'field_media_atoms');
    $file_atoms = field_get_items('field_collection_item', $item, 'field_file_atoms');
    $body = field_get_items('field_collection_item', $item, 'field_body');
    $title = field_get_items('field_collection_item', $item, 'field_title');
    $contacts = field_get_items('field_collection_item', $item, 'field_contact_instances');
    if(
      empty($media_atoms[0]['sid']) &&
      empty($file_atoms[0]['sid']) &&
      empty($body[0]['value']) &&
      empty($title[0]['value']) &&
      (empty($contacts) || empty($contacts[0]['field_referenced_contact']['und'][0]['target_id']))
    ) {
      $is_empty = TRUE;
    }
  } else if ($item->field_name === 'field_shortcut_links') {
      $file_atom = field_get_items('field_collection_item', $item, 'field_file');
      $link = field_get_items('field_collection_item', $item, 'field_link');

      if(
        empty($file_atom[0]['sid']) &&
        empty($link[0]['url']))
        {
        $is_empty = TRUE;
      }
  }
}

//Must be run before slate entity_info_alter?
function ubn_general_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['ubn_search_result'] = array(
    'label' => t('UBN search result'),
    'custom settings' => TRUE,
  );
}
