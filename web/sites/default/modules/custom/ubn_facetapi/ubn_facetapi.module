<?php
/**
 * Implements hook_facetapi_widgets().
 */
function ubn_facetapi_facetapi_widgets() {
  return array(
    'ubn_facetapi_links' => array(
      'handler' => array(
        'label' => t('UBN Links'),
        'class' => 'UBNFacetapiWidgetLinks',
        'parent' => 'FacetapiWidgetLinks',
        'query types' => array('term', 'date'), // Same as parent default?
      ),
    ),
    //Quick and diry for now, how restrict to certain fields?
    //query type boolean, no?
    'ubn_facetapi_checkbox' => array(
      'handler' => array(
        'label' => t('UBN Checkbox'),
        'class' => 'UBNFacetapiWidgetCheckbox',
        'parent' => 'FacetapiWidget',
        'query types' => array('term'), // Same as parent default?
      ),
    ),
  );
}

function ubn_facetapi_theme_registry_alter(&$theme_registry) {
  $theme_registry['facetapi_link_inactive']['variables'] += array(
    'operator' => NULL,
    'hide_inactive_items' => NULL,
    'limit_active_items' => NULL,
  );
  $theme_registry['facetapi_link_active']['variables'] += array(
    'operator' => NULL,
    'hide_inactive_items' => NULL,
    'limit_active_items' => NULL,
  );
  $theme_registry['facetapi_deactivate_widget']['variables'] += array(
    'operator' => NULL,
    'hide_inactive_items' => NULL,
    'limit_active_items' => NULL,
  );
}

//TODO: template?
function ubn_facetapi_theme() {
  return array(
    'ubn_facetapi_facet' => array(
      'variables' => array('items' => array(), 'title' => NULL, 'handle' => NULL, 'attributes' => array()),
    ),
    'ubn_facetapi_header_item' => array(
      'variables' => array('text' => '', 'handle' => ''),
    ),
    /*
    'ubn_facetapi_active_header_item' => array(
      'variables' => array('text' => '', 'path' => '', 'options' => array(), 'container_attributes' => array()),
    ),
    */
    'ubn_facetapi_active_header_item_handle' => array(
      'variables' => array('path' => '', 'options' => array()),
    ),
    'ubn_facetapi_widget_links_handle' => array(
      'variables' => array(),
    ),
    'ubn_facetapi_widget_checkbox_handle' => array(
      'variables' => array('active' => NULL, 'path' => '', 'options' => array()),
    ),
  );
}

/*
function theme_ubn_facetapi_active_header_item($variables) {
  return '<span' . drupal_attributes($variables['container_attributes']) . '>' .
    $variables['text'] .
    theme(
      'link', array(
        'text' => '<span class="fa fa-times"></span>',
        'path' => $variables['path'],
        'options' => array(
          'html' => TRUE,
        ) + $variables['options'],
      )
    ) .
    '</span>';
}
*/

function theme_ubn_facetapi_active_header_item_handle($variables) {
  return theme(
    'link', array(
      'text' => '<span class="fa fa-times"></span>',
      'path' => $variables['path'],
      'options' => array(
        'html' => TRUE,
      ) + $variables['options'],
    )
  );
}

function theme_ubn_facetapi_widget_links_handle() {
  return '<span class="fa fa-chevron-down"></span>';
}

//bun-facetapi-checkbox item
//facet-title, facet-label?
//ubn-facet-label
//ubn-facet-handle?
function theme_ubn_facetapi_header_item($variables) {
  return '<span class="ubn-facet-title-text">' . $variables['text'] . '</span>' .
    '<span class="ubn-facet-title-handle">' . $variables['handle'] . '</span>';
}

function theme_ubn_facetapi_widget_checkbox_handle($variables) {
  return theme(
    'link', array(
      'text' => $variables['active'] ? '<span class="fa fa-check-square-o"></span>' : '<span class="fa fa-square-o"></span>',
      'path' => $variables['path'],
      'options' => array(
        'html' => TRUE,
      ) + $variables['options'],
    )
  );
}

//TODO: remove?
/*
function theme_ubn_facetapi_item_list_wrapper($elements) {
  $element = $elements['element'];
  $container_attributes = $variables['container_attributes'];
  return '<div class="ubn-facet">' .  $element['#children'] . '</div>';
}
*/

function theme_ubn_facetapi_facet($variables) {
  dsm($variables['title']);
  $title = $variables['title'];
  if(!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = array();
  }
  if(empty($variables['items'])) {
    $variables['attributes']['class'][] = 'ubn-facet-no-items';
  }

  $output = '<div' . drupal_attributes($variables['attributes']) . '>';

  $output .= '<div class="ubn-facet-header">';
  if (isset($title) && $title !== '') {
    $output .= '<div class="ubn-facet-header-title" title="'. $title .'">' . $title . '</div>';
  }
  $output .= '<span class="ubn-facet-header-handle">' . $variables['handle'] . '</span>';
  $output .= '</div>';

  if(!empty($variables['items'])) {
    $output .= theme_item_list(
      array(
        'items' => $variables['items'],
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array('class' => array('ubn-facet-items', 'list-unstyled')),
      )
    );
  }
  $output .= '</div>';
  return $output;
}

//TODO: Break up in container/wrapper theme function and theme_links
/**
 * Returns HTML for a list or nested list of items.
 * Base on theme_item_list
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of items to be displayed in the list. If an item is a
 *     string, then it is used as is. If an item is an array, then the "data"
 *     element of the array is used as the contents of the list item. If an item
 *     is an array with a "children" element, those children are displayed in a
 *     nested list. All other elements are treated as attributes of the list
 *     item element.
 *   - title: The title of the list.
 *   - type: The type of list to return (e.g. "ul", "ol").
 *   - attributes: The attributes applied to the list element.
 */
function theme_ubn_facetapi_item_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  // Only output the list container and title, if there are any list items.
  // Check to see whether the block title exists before adding a header.
  // Empty headers are not semantic and present accessibility challenges.
  $output = '<div' . drupal_attributes($container_attributes) . '>';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  $output .= '</div>';
  return $output;
}
