<?php

/**
 * Implements hook_entity_property_info_alter()
 */
function ubn_property_fields_entity_property_info_alter(&$info) {
  foreach ($info as $entity_type => &$entity_type_info) {
    if (isset($entity_type_info['bundles'])) {
      $bundles_field_instances = field_info_instances($entity_type);
      foreach($bundles_field_instances as $bundle_name => $field_instances) {
        foreach($field_instances as $field_instance) {
          if(!empty($field_instance['settings']['ubn_property_field'])) {
            $entity_type_info['bundles'][$bundle_name]['properties']['ubn_property_fields'] = array(
              'label' => t('UBN properties'),
              'type' => 'list<struct>',
              'getter callback' => 'ubn_property_fields_get_property_fields',
              'setter callback' => FALSE, //Read only, hmm??
              //'access callback' => '', //need to implement?a
              'computed' => TRUE, //implications of this? TODO: check entity.module code
              'sanitized' => TRUE, //implications of this?
              'sanitize' => FALSE, //need to set this?
              'translatable' => TRUE, //implications of this?
              'property info' => array(
                'label' => array(
                  'label' => t('Label'),
                  'description' => t('The property label'),
                  'type' => 'text',
                ),
                'value' => array(
                  'label' => t('Label'),
                  'description' => t('The property label'),
                  'type' => 'text',
                ),
                'name' => array(
                  'label' => t('Name'),
                  'description' => t('Name of the field this property is based upon'),
                  'type' => 'token',
                ),
                'type' => array(
                  'label' => t('Type'),
                  'description' => t('Property type of the field this property is based upon'),
                  'type' => 'token',
                ),
                'language' => array(
                  'label' => t('Language'),
                  'description' => t('The currently selected language'),
                  'type' => 'token',
                ),

              ),
            );
            break;
          }
        }
      }
    }
  }
}

//TODO: rename ubn_property_fields_field?? ubn_property_fields_enabled?
function ubn_property_fields_property_fields($entity_type, $bundle_name) {
  //TODO: cache
  $ubn_property_fields = array();
  $field_instances = field_info_instances($entity_type, $bundle_name);
  foreach($field_instances as $field_instance) {
    if(!empty($field_instance['settings']['ubn_property_field'])) {
      $field = field_info_field($field_instance['field_name']);
      $field_type = field_info_field_types($field['type']);
      $ubn_property_fields[] = array(
        'name' => $field_instance['field_name'],
        'label' => $field_instance['label'],
        'type' => $field_type['property_type'],
      );
    }
  }
  return $ubn_property_fields;
}
//TODO: why is this called twice? In memory cache? do debug backtrace
function ubn_property_fields_get_property_fields($entity, array $options, $name, $entity_type, $info) {
  $property_fields = array();
  list(, , $bundle_name) = entity_extract_ids($entity_type, $entity);
  $fields = ubn_property_fields_property_fields($entity_type, $bundle_name);
  if(!empty($fields)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    foreach($fields as $field) {
      $property_field = array();

      //Set value
      $field_wrapper = $wrapper->get($field['name']);
      $property_field['value'] = ubn_property_fields_field_get_value($field_wrapper, $field['type']);

      if(drupal_strlen($property_field['value'])) {
        //Set label
        $key = array('field', $field['name'], $bundle_name, 'label');
        $property_field['label'] = entity_i18n_string(implode($key, ':'), $field['label']);

        // Set name and type
        $property_field['name'] = $field['name'];
        $property_field['type'] = $field['type'];

        //Set language
        $property_field['language'] = $options['language']->language;

        $property_fields[] = $property_field;
      }
    }
  }
  return $property_fields;
}

//TODO: improve
function ubn_property_fields_field_get_value($wrapper, $property_type) {
  switch($property_type) {
    //TODO: support entity-reference with links?
    case 'taxonomy_term':
      $term_names = array();
      //Is this really best practice figuring out cardinality?
      if($wrapper instanceof EntityListWrapper) {
        foreach($wrapper as $term) {
          $term_names[] = $term->name->value();
        }
      }
      else {
        $term_names = array($wrapper->name->value());
      }
      return implode(', ', $term_names);
    default:
      return $wrapper->value();
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function ubn_property_fields_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  if(isset($instance['settings']['ubn_property_field'])) {
    $form['instance']['settings']['ubn_property_field'] = array(
      '#title' => t('UBN property field'),
      '#type' => 'checkbox',
      '#description' => t('Enable this field to be used as an UBN property field'),
      '#default_value' => !empty($instance['settings']['ubn_property_field']),
    );
  }
}

//This could be implemented as hook, but no need for that now
function _ubn_property_fields_supported_field_property_types() {
  //TODO: add more list_-types?
  //TODO: use property type instead of field type, and value callbacks here?
  return array('boolean', 'integer', 'decimal', 'taxonomy_term', 'text');
}

/**
 * Implements hook_field_info_alter()
 */
function ubn_property_fields_field_info_alter(&$info) {
  $supported_field_types = _ubn_property_fields_supported_field_property_types();
  foreach ($info as $field_type => $field_type_info) {
    if(isset($field_type_info['property_type']) && in_array($field_type_info['property_type'], $supported_field_types)) {
      $info[$field_type]['instance_settings'] += array(
        'ubn_property_field' => FALSE,
      );
    }
  }
}
