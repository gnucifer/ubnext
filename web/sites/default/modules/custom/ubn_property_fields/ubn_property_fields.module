<?php

function ubn_property_test($wrapper) {
  foreach($wrapper->ubn_property_fields as $field) {
    dsm($field->label->value());
    dsm($field->value->value());
    dsm($field->type->value());
    dsm($field->name->value());
  }
}

/**
 * Implements hook_entity_property_info_alter()
 */
function ubn_property_fields_entity_property_info_alter(&$info) {
  foreach ($info as $entity_type => &$entity_type_info) {
    if (isset($entity_type_info['bundles'])) {
      $bundles_field_instances = field_info_instances($entity_type);
      foreach($bundles_field_instances as $bundle_name => $field_instances) {
        foreach($field_instances as $field_instance) {
          if($field_instance['settings']['ubn_property_field']) {
            $entity_type_info['bundles'][$bundle_name]['properties']['ubn_property_fields'] = array(
              'label' => t('UBN properties'),
              'type' => 'list<struct>',
              'getter callback' => 'ubn_property_fields_get_property_fields',
              'setter callback' => FALSE, //Read only, hmm??
              //'access callback' => '', //need to implement?a
              'computed' => TRUE, //implications of this? TODO: check entity.module code
              'sanitized' => TRUE, //implications of this?
              'sanitize' => FALSE, //need to set this?
              'translatable' => TRUE, //implications of this?
              'property info' => array(
                'label' => array(
                  'label' => t('Label'),
                  'description' => t('The property label'),
                  //'getter callback' => 'ubn_property_fields_get_property_fields', //wtf :)
                  'type' => 'text',
                ),
                'value' => array(
                  'label' => t('Label'),
                  'description' => t('The property label'),
                  //'getter callback' => 'ubn_property_fields_get_property_fields', //wtf :)
                  'type' => 'text',
                ),
                'name' => array(
                  'label' => t('Name'),
                  'description' => t('Name of the field this property is based upon'),
                  //'getter callback' => 'ubn_property_fields_get_property_fields', //wtf :)
                  'type' => 'token',
                ),
                'type' => array(
                  'label' => t('Type'),
                  'description' => t('Type of the field this property is based upon'), // Or type system of our own?
                  //'getter callback' => 'ubn_property_fields_get_property_fields', //wtf :)
                  'type' => 'token',
                ),
              ),
            );
            break;
          }
        }
      }
    }
  }
}

//TODO: rename ubn_property_fields_field?? ubn_property_fields_enabled?
function ubn_property_fields_property_fields($entity_type, $bundle_name) {
  //TODO: cache
  $ubn_property_fields = array();
  $field_instances = field_info_instances($entity_type, $bundle_name);
  foreach($field_instances as $field_instance) {
    if(!empty($field_instance['settings']['ubn_property_field'])) {
      $ubn_property_fields[] = array(
        'name' => $field_instance['field_name'],
        'label' => $field_instance['label'],
        'type' => 'todo',
      );
    }
  }
  return $ubn_property_fields;
}

function ubn_property_fields_get_property_fields($entity, array $options, $name, $entity_type, $info) {
  $property_fields = array();
  list(, , $bundle_name) = entity_extract_ids($entity_type, $entity);
  $fields = ubn_property_fields_property_fields($entity_type, $bundle_name);
  if(!empty($fields)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    foreach($fields as $field) {
      $field_wrapper = $wrapper->get($field['name']);
      $property_field = array();
      //Get label
      $key = array('field', $field['name'], $bundle_name, 'label');
      $property_field['label'] = entity_i18n_string(implode($key, ':'), $field['label']);
      $property_field['name'] = $field['name'];
      $property_field['type'] = $field['type'];
      $field_wrapper = $wrapper->get($field['name']);
      $property_field['value'] = ubn_property_fields_field_get_value($field_wrapper, $field['type']);
      $property_fields[] = $property_field;
    }
  }
  return $property_fields;
}

//TODO: improve
function ubn_property_fields_field_get_value($wrapper, $type) {
  return $wrapper->value();
}

function ubn_property_fields_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  if(isset($instance['settings']['ubn_property_field'])) {
    $form['instance']['settings']['ubn_property_field'] = array(
      '#title' => t('UBN property field'),
      '#type' => 'checkbox',
      '#description' => t('Enable this field to be used as an UBN property field'),
      '#default_value' => !empty($instance['settings']['ubn_property_field']),
    );
  }
}

//This could be implemented as hook, but no need for that now
function _ubn_property_fields_supported_field_types() {
  //TODO: add more list_-types?
  return array('list_boolean', 'number_integer', 'number_decimal', 'number_float', 'text', 'taxonomy_term_reference');
}

function ubn_property_fields_field_info_alter(&$info) {
  $supported_field_types = _ubn_property_fields_supported_field_types();
  foreach ($info as $field_type => $field_type_info) {
    if(in_array($field_type, $supported_field_types)) {
      $info[$field_type]['instance_settings'] += array(
        'ubn_property_field' => FALSE,
      );
    }
  }
}
