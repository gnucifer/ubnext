<?php
function _ubn_slate_content_sections_atoms($content_sections, $atom_type = NULL, $limit = NULL) {
  $atoms = array();
  foreach($content_sections as $content_section) {
    foreach($content_section->field_media_atoms as $atom) {
      if(
        (
          !isset($atom_type) ||
          $atom->getBundle() === $atom_type
        ) &&
        (
          !isset($limit) ||
          $limit--
        )
      ) {
        $atoms[] = $atom;
      }
    }
  }
  return $atoms;
}

function _ubn_slate_opening_hours_items($opening_hours_values, $weekdays = NULL, $limit = NULL, $indicate_exception = NULL) {
  //TODO: static lookup table for weekdays?
  $opening_hours_items = array();
  $tz = new DateTimeZone(date_default_timezone());
  $today = new DateTime('now', $tz);
  $today = $today->format('Y-m-d');
  $tomorrow = new DateTime('+ 1 day', $tz);
  $tomorrow = $tomorrow->format('Y-m-d');
  foreach($opening_hours_values as $i => $opening_hours) {
    if(isset($limit) && $i > $limit || is_array($weekdays) && empty($weekdays)) {
      break;
    }
    // http://php.net/manual/en/datetime.construct.php:
    // The $timezone parameter and the current timezone are ignored when the
    // $time parameter either is a UNIX timestamp (e.g. @946684800) or specifies
    // a timezone (e.g. 2010-01-28T15:00:00+02:00).
    $opening_hours_date_datetime = new DateTime('@' . $opening_hours->field_opening_hours_date->value());
    $opening_hours_date_datetime->setTimezone($tz);
    $opening_hours_date = $opening_hours_date_datetime->format('Y-m-d');

    $weekday = NULL;
    if ($opening_hours_date === $today) {
      $weekday = t('Today');
    }
    elseif ($opening_hours_date === $tomorrow) {
      $weekday = t('Tomorrow');
    }
    else {
      //Could replace with lookup-table (php array) to avoid variable in t()
      $weekday = t($opening_hours_date_datetime->format("l"));
    }
    if(is_array($weekdays))  {
      if(in_array($weekday, $weekdays)) {
        unset($weekdays[array_search($weekday, $weekdays)]);
      }
      else {
        continue;
      }
    }
    $opening_hours_items[$i] = array(
      'weekday' => $weekday,
      'timestamp' => $opening_hours_date_datetime->getTimestamp(),
      'is_open' => (bool) $opening_hours->field_opening_hours_is_open->value(),
      'date' => $opening_hours_date,
    );

    if($opening_hours_items[$i]['is_open']) {
      //TODO: would be more correct to get timezone from field, or if ->value()
      //produced an ISO-formatted time-string with timezone-information
      $opening_hours_from = new DateTime('@' . $opening_hours->field_opening_hours_datetime->value->value());
      $opening_hours_from->setTimezone($tz);
      $opening_hours_to = new DateTime('@' . $opening_hours->field_opening_hours_datetime->value2->value());
      $opening_hours_to->setTimezone($tz);
      $opening_hours_items[$i]['hours'] = $opening_hours_from->format('H:i') . ' - ' . $opening_hours_to->format('H:i');
    }
    else {
      $opening_hours_items[$i]['hours'] = t('Closed');
    }
    $opening_hours_items[$i]['is_exception'] = (bool) $opening_hours->field_opening_hours_is_exception->value();
  }
  usort($opening_hours_items, '_ubn_slate_opening_hours_timestamp_compare');
  return array_values($opening_hours_items);
}

function _ubn_slate_opening_hours_timestamp_compare($opening_hours_a, $opening_hours_b) {
  return $opening_hours_a['timestamp'] - $opening_hours_b['timestamp'];
}

function _ubn_slate_number_format($number, $decimals = 2) {
  return rtrim(rtrim(number_format($number, $decimals, ',', ' '), '0'), ',');
}

// "Skip base" option?
function _ubn_slate_namespace_classes($base, $namespace = '', $suffix = '') {
  $classes = array();
  if($base) {
    $classes[] = implode('-', array_filter(array($base, $suffix)));
  }
  if($namespace) {
    $classes[] = implode('-', array_filter(array($namespace, $suffix)));
  }
  return implode(' ', array_unique(array_filter($classes)));
}

/**
 * Implements hook_slate_twig_alter().
 *
 * @param $twig
 */
function ubn_slate_slate_twig_alter(&$twig) {
  $twig->addExtension(new Twig_Extensions_Extension_Text());

  $function = new Twig_SimpleFunction(
    'ubn_content_sections_atoms',
    '_ubn_slate_content_sections_atoms'
  );
  $twig->addFunction($function);

  $function = new Twig_SimpleFunction(
    'ubn_namespace_classes',
    '_ubn_slate_namespace_classes'
  );
  $twig->addFunction($function);

  $function = new Twig_SimpleFunction(
    'ubn_opening_hours_items',
    '_ubn_slate_opening_hours_items'
  );
  $twig->addFunction($function);

  $filter = new Twig_SimpleFilter(
    'ubn_number_format',
    '_ubn_slate_number_format'
  );
  $twig->addFilter($filter);

  global $base_url;
  $twig->addGlobal('base_url', $base_url);
}

