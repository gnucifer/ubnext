<?php

function _ubn_slate_opening_hours_items($opening_hours_values, $weekdays = NULL, $limit = NULL) {
  //TODO: static lookup table for weekdays?
  $opening_hours_items = array();
  $tz = new DateTimeZone(date_default_timezone());
  $today = new DateTime('now', $tz);
  $today = $today->format('Y-m-d');
  $tomorrow = new DateTime('+ 1 day', $tz);
  $tomorrow = $tomorrow->format('Y-m-d');
  foreach($opening_hours_values as $i => $opening_hours) {
    if(isset($limit) && $i > $limit || is_array($weekdays) && empty($weekdays)) {
      break;
    }
    // http://php.net/manual/en/datetime.construct.php:
    // The $timezone parameter and the current timezone are ignored when the
    // $time parameter either is a UNIX timestamp (e.g. @946684800) or specifies
    // a timezone (e.g. 2010-01-28T15:00:00+02:00).
    $opening_hours_date_datetime = new DateTime('@' . $opening_hours->field_opening_hours_date->value());
    $opening_hours_date_datetime->setTimezone($tz);
    $opening_hours_date = $opening_hours_date_datetime->format('Y-m-d');

    $weekday = NULL;
    //$is_today = FALSE;
    //$is_tomorrow = FALSE;
    if ($opening_hours_date === $today) {
      //$is_today = TRUE;
      $weekday = t('Today');
    }
    elseif ($opening_hours_date === $tomorrow) {
      //$is_tomorrow = TRUE;
      $weekday = t('Tomorrow');
    }
    else {
      //Could replace with lookup-table (php array) to avoid variable in t()
      $weekday = t($opening_hours_date_datetime->format("l"));
    }
    if(is_array($weekdays))  {
      if(in_array($weekday, $weekdays)) {
        unset($weekdays[array_search($weekday, $weekdays)]);
      }
      else {
        continue;
      }
    }

    $opening_hours_items[$i] = array(
      'weekday' => $weekday,
      //'is_today' => $is_today,
      //'is_tomorrow' => $is_tomorrow,
      'is_open' => (bool) $opening_hours->field_opening_hours_is_open->value(),
    );

    if($opening_hours_items[$i]['is_open']) {
      //TODO: would be more correct to get timezone from field, or if ->value()
      //produced an ISO-formatted time-string with timezone-information
      $opening_hours_from = new DateTime('@' . $opening_hours->field_opening_hours->value->value());
      $opening_hours_from->setTimezone($tz);
      $opening_hours_to = new DateTime('@' . $opening_hours->field_opening_hours->value2->value());
      $opening_hours_to->setTimezone($tz);
      $opening_hours_items[$i]['hours'] = $opening_hours_from->format('H:i') . ' - ' . $opening_hours_to->format('H:i');
    }
    else {
      $opening_hours_items[$i]['hours'] = t('Closed');
    }
    $opening_hours_items[$i]['is_exception'] = (bool) $opening_hours->field_opening_hours_is_exception->value();
    if($opening_hours_items[$i]['is_exception']) {
      $opening_hours_items[$i]['hours'] .= '*';
    }
  }
  return array_values($opening_hours_items);
}

/**
 * Implements hook_slate_twig_alter().
 *
 * @param $twig
 */
function ubn_slate_slate_twig_alter(&$twig) {
  $function = new Twig_SimpleFunction(
    'ubn_opening_hours_items',
    '_ubn_slate_opening_hours_items'
  );
  $twig->addFunction($function);
}

