diff --git a/includes/SearchApiEtDatasourceController.php b/includes/SearchApiEtDatasourceController.php
index eb9222f..10b6fd3 100644
--- a/includes/SearchApiEtDatasourceController.php
+++ b/includes/SearchApiEtDatasourceController.php
@@ -272,10 +272,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
       // Sometimes we get item_ids not meant to be tracked, just filter them out.
       $ids = $this->filterTrackableIds($index, $item_ids);
       if ($ids) {
-        // Some times the item could be already in the index, let try to remove
-        // them before inserting.
-        parent::trackItemDelete($ids, array($index));
-
         // Actually add the items to the index.
         parent::trackItemInsert($ids, array($index));
         $ret[$index_id] = $index;
@@ -285,37 +281,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
   }
 
   /**
-   * {@inheritdoc}
-   * @param $item_ids array|string
-   * @param $indexes SearchApiIndex[]
-   * @param $dequeue bool
-   */
-  public function trackItemChange($item_ids, array $indexes, $dequeue = FALSE) {
-    // If this method was called from _search_api_index_reindex(), $item_ids
-    // will be set to FALSE, which means we need to reindex all items, so no
-    // need for any other processing below.
-    if ($item_ids === FALSE) {
-      parent::trackItemChange($item_ids, $indexes, $dequeue);
-      return NULL;
-    }
-
-    $ret = array();
-    foreach ($indexes as $index_id => $index) {
-      // The $item_ids can contain a single EntityID if we get invoked from the
-      // hook: search_api_et_entity_update(). In this case we need to, for each
-      // Index, identify the set of ItemIDs that need to be marked as changed.
-      // Check if we get Entity IDs or Item IDs.
-      $ids = $this->getTrackableItemIdsFromMixedSource($index, $item_ids);
-
-      if (!empty($ids)) {
-        parent::trackItemChange($ids, array($index), $dequeue);
-        $ret[$index_id] = $index;
-      }
-    }
-    return $ret;
-  }
-
-  /**
    * Retrieves all Item IDs from the given index, filtered by the Entity IDs.
    *
    * Is used instead of SearchApiAbstractDataSourceController::getAllItemIds(),
@@ -351,47 +316,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
   }
 
   /**
-   * {@inheritdoc}
-   */
-  public function trackItemDelete(array $item_ids, array $indexes) {
-    $ret = array();
-    foreach ($indexes as $index_id => $index) {
-      // The $item_ids can contain also single EntityID if we get invoked from the
-      // hook: search_api_et_entity_delete(). In this case we need to, for each
-      // Index, identify the set of ItemIDs that need to be marked as changed.
-      $ids = $this->getTrackableItemIdsFromMixedSource($index, $item_ids);
-
-      if ($ids) {
-        parent::trackItemDelete($ids, array($index));
-        $ret[$index_id] = $index;
-      }
-    }
-    return $ret;
-  }
-
-  /**
-   * Helper function to return the list of ItemIDs, fiven
-   * @param \SearchApiIndex $index
-   * @param $mixed_ids
-   * @return array
-   */
-  protected function getTrackableItemIdsFromMixedSource(SearchApiIndex $index, $mixed_ids) {
-    // Check if we get Entity IDs or Item IDs.
-    $first_item_id = reset($mixed_ids);
-    $is_valid_item_id = SearchApiEtHelper::isValidItemId($first_item_id);
-    if (!$is_valid_item_id) {
-      $entity_id = $first_item_id;
-      $ids = $this->getTrackableItemIds($index, $entity_id);
-    }
-    else {
-      // Filter the item_ids that need to be tracked by this index.
-      $ids = $this->filterTrackableIds($index, $mixed_ids);
-    }
-
-    return $ids;
-  }
-
-  /**
    * @param SearchApiIndex $index
    *   The index for which item IDs should be retrieved.
    * @param array $entity_ids
@@ -458,11 +382,11 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
     // Generate the list of candidate ItemIDs from the current EntityIDs
     $trackable_item_ids = $this->getTrackableItemIds($index, array_keys($grouped_item_ids));
 
-    // The $trackable_item_ids will contain all ItemIDs that should be indexed.
-    // Additional translations, other than the one provided in $item_ids, will
-    // be taken into account, to cover the case when a non-translatable field is
-    // changed on one translation and such change must be reflected to all other
-    // indexed translations.
-    return $trackable_item_ids;
+    // This is important: of all the possible trackable item ids for the
+    // entities of the inserted translation, only insert the ones also present
+    // in $items_ids, since among all the trackable item ids there could exist
+    // items which has already been inserted (and instead will be updated in
+    // hook_entity_update)
+    return array_intersect($item_ids, $trackable_item_ids);
   }
 }
diff --git a/search_api_et.module b/search_api_et.module
index 25712a1..6116a39 100644
--- a/search_api_et.module
+++ b/search_api_et.module
@@ -299,11 +299,11 @@ function search_api_et_item_languages($entity, $entity_type, SearchApiIndex $ind
   return $languages;
 }
 
-
 /**
  * Implements hook_entity_delete().
  */
 function search_api_et_entity_delete($entity, $entity_type) {
+  module_load_include('inc', 'search_api_et');
   // We only react on entity operations for types with property information, as
   // we don't provide search integration for the others.
   if (!entity_get_property_info($entity_type)) {
@@ -311,8 +311,11 @@ function search_api_et_entity_delete($entity, $entity_type) {
   }
 
   list($entity_id, $revision, $bundle) = entity_extract_ids($entity_type, $entity);
-  // Passing the EntityID only, so every index can properly handle their translations.
-  search_api_track_item_delete(SearchApiEtHelper::getItemType($entity_type), array($entity_id));
+  $item_ids = array();
+  foreach (search_api_et_item_languages_entity($entity, $entity_type) as $language) {
+    $item_ids[] = SearchApiEtHelper::buildItemId($language, $entity_id);
+  }
+  search_api_track_item_delete(SearchApiEtHelper::getItemType($entity_type), $item_ids);
 }
 
 /**
@@ -324,7 +327,7 @@ function search_api_et_entity_update($entity, $entity_type) {
   if (!entity_get_property_info($entity_type)) {
     return;
   }
-
+  module_load_include('inc', 'search_api_et');
   list($entity_id, $revision, $bundle) = entity_extract_ids($entity_type, $entity);
   $et_entity_type = SearchApiEtHelper::getItemType($entity_type);
 
@@ -339,8 +342,19 @@ function search_api_et_entity_update($entity, $entity_type) {
     }
   }
 
-  // Passing the EntityID only, so every index can properly handle their translations.
-  search_api_track_item_change($et_entity_type, array($entity_id));
+  $item_ids = array();
+  //TODO: Newly inserted item_id will also be included in $item_ids
+  //this should not be a problem though?
+  foreach (search_api_et_item_languages_entity($entity, $entity_type) as $language) {
+    // Skip entity translation language since has already been processed
+    // through entity translation update/insert hooks
+    $item_ids[] = SearchApiEtHelper::buildItemId($entity_id, $language);
+  }
+
+  // Track the changes of translations.
+  if (!empty($item_ids)) {
+    search_api_track_item_change($et_entity_type, $item_ids);
+  }
 }
 
 /**
@@ -359,16 +373,6 @@ function search_api_et_entity_translation_insert($entity_type, $entity, $transla
 }
 
 /**
- * Implements hook_entity_translation_update().
- */
-function search_api_et_entity_translation_update($entity_type, $entity, $translation, $values = array()) {
-  list($entity_id) = entity_extract_ids($entity_type, $entity);
-  $item_id = SearchApiEtHelper::buildItemId($entity_id, $translation['language']);
-
-  search_api_track_item_change(SearchApiEtHelper::getItemType($entity_type), array($item_id));
-}
-
-/**
  * Implements hook_entity_translation_delete().
  */
 function search_api_et_entity_translation_delete($entity_type, $entity, $langcode) {
