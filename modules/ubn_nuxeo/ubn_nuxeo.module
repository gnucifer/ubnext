<?php
/**
 * @file
 * Code for the Nuxeo feature.
 */

include_once 'ubn_nuxeo.features.inc';


/**
 * Implements hook_ctools_plugin_directory().
 */
function ubn_nuxeo_ctools_plugin_directory($owner, $plugin_type) {
  if (in_array($plugin_type, array('content_types'))) {
    return "plugins/$plugin_type";
  }
}


/**
 * Implements hook_form_alter()
 * This function manipulates the form
 * for creation and updating of the content type.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ubn_nuxeo_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'document_list_node_form') {
    #var_dump(array('hej' => 'håå', 'halloj' => 'Hejkon Bejkon!'));
    #var_dump($form['field_doclist_doctypes']['und']['#options']);
    #print_r($form);
    #var_dump($form_state);
    #$a_component = $form_state;
    #var_dump($a_component);
    #var_dump($form_state['field']['field_doclist_doctypes']['und']);
    #var_dump($form['field_doclist_doctypes']['und']['#entity']);
    $ent = $form['field_doclist_doctypes']['und']['#entity'];
    var_dump($ent);

    $default_doctypes = array();

    if (isset($ent->field_doclist_doctypes)) {
      foreach ($ent->field_doclist_doctypes['und'] as $doctype) {
      # var_dump($doctype);
        $default_doctypes[] = $doctype['value'];
      }
    }
    #var_dump($default_doctypes);

    #var_dump($ent);
    #var_dump($ent->field_doclist_doctypes['und'][0]['value']);

    #var_dump($ent->field_doclist_orgs['und'][0]['value']);
    ##var_dump($ent->field_doclist_orgs['und']);

    $default_orgs = array();

    if (isset($ent->field_doclist_orgs)) {
      foreach ($ent->field_doclist_orgs['und'] as $org) {
      # var_dump($org);
        $default_orgs[] = $org['value'];
      }
    }
    #var_dump($default_orgs);

    $vocabulary = (isset($_SERVER['DMS_API_DOCTYPES']) ?$_SERVER['DMS_API_DOCTYPES']  : 'l10n_ub_doctypes' );
    $ub_doctypes = _ubn_nuxeo_vocabulary($vocabulary);
    #var_dump($ub_doctypes);
    $form['field_doclist_doctypes']['und']['#options'] = $ub_doctypes;
    #$form['field_doclist_doctypes']['und']['#default_value'] = $default_doctypes;

    if (isset($default_doctypes[0])) {
      $form['field_doclist_doctypes']['und']['#default_value'] = $default_doctypes[0];
    }
    #var_dump($form['field_doclist_doctypes']['und']);
    #var_dump($form['field_doclist_doctypes']);

    $vocabulary = (isset($_SERVER['DMS_API_ORGS']) ?$_SERVER['DMS_API_ORGS']  : 'l10n_ub_orgs' );
    $ub_orgs = _ubn_nuxeo_vocabulary($vocabulary);
    #var_dump($ub_orgs);
    #var_dump($form['field_doclist_orgs']['und']);
    $form['field_doclist_orgs']['und']['#options'] = $ub_orgs;
    $form['field_doclist_orgs']['und']['#default_value'] = $default_orgs;
    ##var_dump($form['field_doclist_orgs']['und']);
    #var_dump($form['field_doclist_orgs']['und']['#options']);
  }
}

/**
 * Connects to the Document Management System and retrieves the given
 * vocabularies. The vocabularies are returned as an array with the
 * vocabulary ID as a key and the label as value.
 *
 * @param string $vocabulary
 * @return mixed|string
 */
function _ubn_nuxeo_vocabulary($vocabulary = 'l10n_ub_orgs') {

  $headers = array(
    'X-NXDocumentProperties' => '*',
  );

  // Options used in http request
  $options = array(
    'headers' => $headers,
  );

  $username = (isset($_SERVER['DMS_API_USERNAME']) ?$_SERVER['DMS_API_USERNAME']  : 'TheUsername' );
  $password = (isset($_SERVER['DMS_API_PASSWORD']) ?$_SERVER['DMS_API_PASSWORD']  : 'ThePassword' );
  $protocol = (isset($_SERVER['DMS_API_PROTOCOL']) ?$_SERVER['DMS_API_PROTOCOL']  : 'https' );
  $base_url = (isset($_SERVER['DMS_API_BASE_URL']) ?$_SERVER['DMS_API_BASE_URL']  : 'doku.ub.gu.se/nuxeo/api/v1/' );
  $end_point = (isset($_SERVER['DMS_API_EP_DIRECTORY']) ?$_SERVER['DMS_API_EP_DIRECTORY']  : 'directory/' );

  $url = $protocol."://".$username.":".$password."@".$base_url . $end_point . $vocabulary;

  #var_dump($url);
  $response = drupal_http_request($url, $options);
  #var_dump($response);

  $vocabulary = array();

  if (!empty($response->error)) {
    return $vocabulary;
  }

  $json = $response->data;
  $data = json_decode($json, true);

  $top_levels = array();

  foreach ($data['entries'] as $entry) {
    $id = "";

    if (empty($entry['properties']['parent'])) {

      $id = $entry['properties']['id'];

      # If the _top string is within the id, skip it from our vocabulary
      # and put it in a separate array for later use.
      if (strpos($id, '_top') !== FALSE) {
        $top_levels[$id] = $entry['properties']['label_sv'];
      }
    }
  }

  foreach ($data['entries'] as $entry) {
    $id = "";

    if (empty($entry['properties']['parent'])) {

      $id = $entry['properties']['id'];

      # If the _top string is absent in the id, use it in our vocabulary
      if (strpos($id, '_top') === false) {
        $vocabulary[$id] = $entry['properties']['label_sv'];
      }
    }
    else {
      $parent = $entry['properties']['parent'];
      $id .= $parent . '/' . $entry['properties']['id'];
      $vocabulary[$id] = "(" . $top_levels[$parent] . ") " . $entry['properties']['label_sv'];
    }
    //var_dump($id);
  }
  //var_dump($top_levels);
  //var_dump($vocabulary);
  return $vocabulary;
}
