<?php
/**
 * @file
 * Code for the Guide feature.
 */

include_once 'ubn_guide.features.inc';


/**
 * Implements hook_ctools_plugin_directory().
 */
function ubn_guide_ctools_plugin_directory($owner, $plugin_type) {
  if (in_array($plugin_type, array('content_types', 'relationships'))) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_entity_insert().
 */
function ubn_guide_entity_insert($entity, $type) {
  ubn_guide_entity_delete($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function ubn_guide_entity_update($entity, $type) {
  ubn_guide_entity_delete($entity, $type);
}

/**
 * Implements hook_entity_delete().
 *
 * @todo do we need to update when type is guide?
 */
function ubn_guide_entity_delete($entity, $type) {
  if ($type === 'node' && in_array($entity->type, array('guide', 'guide_chapter'))) {
    // Reset URL bound map if this is a guide or guide chapter node.
    _ubn_guide_url_bound_map(TRUE);
  }
}

/**
 * Get a inbound and outbound map for guides and their first chapters.
 */
function _ubn_guide_url_bound_map($reset = FALSE) {
  $map = &drupal_static(__FUNCTION__);

  if (!isset($map) || $reset) {
    if (($cache = cache_get(__FUNCTION__)) === FALSE || $reset) {
      $query = new EntityFieldQuery();

      $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'guide')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

      $result = $query->execute();

      $inbound = array();

      if (!empty($result['node'])) {
        foreach (array_keys($result['node']) as $guide) {
          $chapters = ubn_guide_get_children($guide, 1);

          if (empty($chapters)) {
            continue;
          }

          $chapter = key($chapters);

          $inbound["node/{$guide}"] = "node/{$chapter}";
        }
      }

      $map = array($inbound, array_flip($inbound));

      cache_set(__FUNCTION__, $map);
    }
    else {
      $map = $cache->data;
    }
  }

  return $map;
}

/**
 * Get a list of guide aliases.
 */
function _ubn_guide_url_guide_aliases($reset = FALSE) {
  $aliases = &drupal_static(__FUNCTION__);

  if (!isset($aliases) || $reset) {
    if (($cache = cache_get(__FUNCTION__)) === FALSE || $reset) {
      $query = new EntityFieldQuery();

      $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'guide')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

      $result = $query->execute();

      $aliases = array();

      if (!empty($result['node'])) {
        foreach (array_keys($result['node']) as $guide) {
          $aliases[drupal_get_path_alias("node/{$guide}")] = $guide;
        }
      }

      cache_set(__FUNCTION__, $aliases);
    }
    else {
      $aliases = $cache->data;
    }
  }

  return $aliases;
}

/**
 * Implements hook_url_outbound_alter().
 */
function ubn_guide_url_outbound_alter(&$path, &$options, $original_path) {
  list(, $map) = _ubn_guide_url_bound_map();

  if (isset($map[$original_path])) {
    $path = drupal_get_path_alias($map[$original_path], $options['language']->language);
    $options['alias'] = TRUE;
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function ubn_guide_url_inbound_alter(&$path, $original_path, $path_language) {
  list($map, ) = _ubn_guide_url_bound_map();

  if (isset($map[$path])) {
    $path = $map[$path];
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function ubn_guide_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  $aliases = _ubn_guide_url_guide_aliases();

  if (isset($aliases[$path])) {
    $http_response_code = 302;
  }
}

/**
 * Implements hook_path_insert().
 */
function ubn_guide_path_insert($path) {
  $node = menu_get_object('node', 1, $path['source']);

  if (!isset($node->type) || $node->type !== 'guide') {
    return;
  }

  // New guide alias, reset alias cache.
  _ubn_guide_url_guide_aliases(TRUE);
}

/**
 * Implements hook_path_update().
 */
function ubn_guide_path_update($path) {
  $node = menu_get_object('node', 1, $path['source']);

  if (!isset($node->type) || !in_array($node->type, array('guide', 'guide_chapter'))) {
    return;
  }

  if ($node->type === 'guide') {
    // Updated guide alias, reset alias cache.
    _ubn_guide_url_guide_aliases(TRUE);
  }

  $children = array_keys(ubn_guide_get_children($node->nid, 1));

  if (empty($children)) {
    return;
  }

  // Clear path cache, but do it only once.
  if (($clear = &drupal_static(__FUNCTION__, TRUE)) === TRUE) {
    cache_clear_all("*", 'cache_path');

    $clear = FALSE;
  }

  pathauto_node_update_alias_multiple($children, 'bulkupdate');
}

/**
 * Get root node
 *
 * @todo use ubn_guide_get_parents()
 */
function ubn_guide_get_root(EntityDrupalWrapper $node) {
  switch ($node->getBundle()) {
    case 'guide':
      return $node;

    case 'guide_chapter':
      return ubn_guide_get_root($node->field_guide_chapter_parent);

    default:
      throw new Exception('Invalid bundle.');
  }
}

/**
 * Get children as a tree.
 *
 * @todo cache?
 */
function ubn_guide_get_children($nid, $depth = -1) {
  $children = array();

  if ($depth === 0) {
    return $children;
  }

  $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'guide_chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_guide_chapter_parent', 'target_id', $nid)
    ->fieldOrderBy('field_guide_chapter_weight', 'value', 'ASC');

  $result = $query->execute();

  if (!empty($result['node'])) {
    foreach ($result['node'] as $child) {
      $children[$child->nid] = ubn_guide_get_children($child->nid, $depth - 1);
    }
  }

  return $children;
}

/**
 * Return a list of parents.
 */
function ubn_guide_get_parents(EntityDrupalWrapper $node) {
  switch ($node->getBundle()) {
    case 'guide':
      return array();

    case 'guide_chapter':
      return array_merge(array($node->field_guide_chapter_parent->getIdentifier()), ubn_guide_get_parents($node->field_guide_chapter_parent));

    default:
      throw new Exception('Invalid bundle.');
  }
}

/**
 * Flatten a tree of children.
 */
function ubn_guide_flatten($tree) {
  $flat = array();

  foreach ($tree as $id => $children) {
    $flat[] = $id;

    if (!empty($children)) {
      $flat = array_merge($flat, ubn_guide_flatten($children));
    }
  }

  return $flat;
}

/**
 * Finds the prev chapter for a guide/chapter.
 */
function ubn_guide_find_prev_chapter(EntityDrupalWrapper $node) {
  $root = ubn_guide_get_root($node);

  $children = ubn_guide_get_children($root->getIdentifier());
  $flatten = ubn_guide_flatten($children);

  $index = array_search($node->getIdentifier(), $flatten);

  if ($index === 0) {
    return FALSE;
  }

  return $flatten[$index - 1];
}

/**
 * Finds the next chapter for a guide/chapter.
 */
function ubn_guide_find_next_chapter(EntityDrupalWrapper $node) {
  $root = ubn_guide_get_root($node);

  $children = ubn_guide_get_children($root->getIdentifier());

  if (empty($children)) {
    return FALSE;
  }

  $flatten = ubn_guide_flatten($children);

  $index = array_search($node->getIdentifier(), $flatten);

  return isset($flatten[$index + 1]) ? $flatten[$index + 1] : FALSE;
}
